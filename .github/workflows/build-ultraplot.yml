name: Build and Test
on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
      matplotlib-version:
        required: true
        type: string

env:
  LC_ALL: en_US.UTF-8
  LANG: en_US.UTF-8

jobs:
  build-ultraplot:
    name: Test Python ${{ inputs.python-version }} with ${{ inputs.matplotlib-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v2.0.4
        with:
          environment-file: ./environment.yml
          init-shell: bash
          create-args: >-
            --verbose
            python=${{ inputs.python-version }}
            matplotlib=${{ inputs.matplotlib-version }}
          cache-environment: true
          cache-downloads: false

      - name: Build Ultraplot
        shell: bash -el {0}
        run: |
          micromamba activate ultraplot-dev
          pip install .

      - name: Test Ultraplot
        shell: bash -el {0}
        run: |
          micromamba activate ultraplot-dev
          pytest

  compare-baseline:
    needs: build-ultraplot
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: mamba-org/setup-micromamba@v2.0.4
        with:
          environment-file: ./environment.yml
          init-shell: bash
          create-args: >-
            --verbose
            python=${{ inputs.python-version }}
            matplotlib=${{ inputs.matplotlib-version }}
          cache-environment: true
          cache-downloads: false

      - name: Generate baseline from main
        shell: bash -el {0}
        run: |
          cd $GITHUB_WORKSPACE
          mkdir -p baseline
          micromamba activate ultraplot-dev
          git fetch origin ${{ github.event.pull_request.base.sha }}
          git checkout ${{ github.event.pull_request.base.sha }}
          python -c "import ultraplot as plt; plt.config.Configurator()._save_yaml('ultraplot.yml')"
          pytest --mpl-generate-path=baseline --mpl-default-style="./ultraplot.yml"
          git checkout ${{ github.sha }}  # Return to PR branch

      - name: Image Comparison Ultraplot
        shell: bash -el {0}
        run: |
          cd $GITHUB_WORKSPACE
          micromamba activate ultraplot-dev
          mkdir -p results
          python -c "import ultraplot as plt; plt.config.Configurator()._save_yaml('ultraplot.yml')"
          pytest --mpl --mpl-baseline-path=baseline --mpl-generate-summary=html --mpl-results-path=./results/ --mpl-default-style="./ultraplot.yml"

      # Return the html output of the comparison even if failed
      - name: Upload comparison failures
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: failed-comparisons-${{ inputs.python-version }}-${{ inputs.matplotlib-version }}
          path: results/*

      - name: Prepare GitHub Pages directory
        if: always()
        run: |
          mkdir -p gh-pages
          # Copy all results to the gh-pages directory
          if [ -d "results" ] && [ -f "results/fig_comparison.html" ]; then
            # Create subdirectory based on Python and matplotlib version
            version_dir="py${{ inputs.python-version }}-mpl${{ inputs.matplotlib-version }}"
            mkdir -p gh-pages/$version_dir
            cp -r results/* gh-pages/$version_dir/

            # Create the version card HTML
            version_card="<div class=\"version-card\">
              <h3>Python ${{ inputs.python-version }}</h3>
              <p>matplotlib ${{ inputs.matplotlib-version }}</p>
              <a href=\"./$version_dir/fig_comparison.html\" class=\"view-button\">View Comparison Results</a>
            </div>"

            # Read the template and perform substitutions
            cat .github/workflows/templates/results.html > gh-pages/index.html

            # Replace placeholders with actual values
            sed -i "s|PR_NUMBER|${{ github.event.pull_request.number }}|g" gh-pages/index.html
            sed -i "s|PR_TITLE|${{ github.event.pull_request.title }}|g" gh-pages/index.html
            sed -i "s|REPO_NAME|${{ github.repository }}|g" gh-pages/index.html
            sed -i "s|COMMIT_SHA|${{ github.sha }}|g" gh-pages/index.html
            sed -i "s|VERSION_CARDS|$version_card|g" gh-pages/index.html
            sed -i "s|GENERATION_DATE|$(date)|g" gh-pages/index.html
          else
            # Use the minimal template if no results are available
            cat .github/workflows/templates/no-results.html > gh-pages/index.html
          fi

  deploy-pages:
    needs: compare-baseline
    if: always()
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
