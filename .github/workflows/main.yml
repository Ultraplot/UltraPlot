name: Matrix Test
on:
  push:
    branches: [main, devel]
  pull_request:
    branches: [main, devel]

jobs:
  get-versions:
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.set-versions.outputs.python-versions }}
      matplotlib-versions: ${{ steps.set-versions.outputs.matplotlib-versions }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install tomli

      - id: set-versions
        run: |
          # Create a Python script to read and parse versions
          cat > get_versions.py << 'EOF'
          import tomli
          import re
          import json

          # Read pyproject.toml
          with open("pyproject.toml", "rb") as f:
              data = tomli.load(f)

          # Get Python version requirement
          python_req = data["project"]["requires-python"]

          # Parse min and max Python versions
          min_version = re.search(r">=(\d+\.\d+)", python_req)
          max_version = re.search(r"<(\d+\.\d+)", python_req)

          python_versions = []
          if min_version and max_version:
              # Convert version strings to tuples
              min_v = tuple(map(int, min_version.group(1).split(".")))
              max_v = tuple(map(int, max_version.group(1).split(".")))

              # Generate version list
              current = min_v
              while current < max_v:
                  python_versions.append(".".join(map(str, current)))
                  current = (current[0], current[1] + 1)

          # Look for Matplotlib classifiers
          mpl_versions = []
          for classifier in data["project"]["classifiers"]:
              if classifier.startswith("Framework :: Matplotlib ::"):
                  version = classifier.split("::")[-1].strip()
                  mpl_versions.append(version)

          if not mpl_versions:
              # Default to 3.10 if no Matplotlib versions found
              mpl_versions = ["3.10"]

          # Print as compact JSON arrays without whitespace
          print(f"PYTHON_VERSIONS={json.dumps(python_versions, separators=(',', ':'))}")
          print(f"MPL_VERSIONS={json.dumps(mpl_versions, separators=(',', ':'))}")
          EOF

          # Run the script and capture output
          while IFS= read -r line; do
            if [[ $line == PYTHON_VERSIONS=* ]]; then
              PYTHON_VERSIONS=${line#PYTHON_VERSIONS=}
              echo "python-versions=${PYTHON_VERSIONS}" >> $GITHUB_OUTPUT
            elif [[ $line == MPL_VERSIONS=* ]]; then
              MPL_VERSIONS=${line#MPL_VERSIONS=}
              echo "matplotlib-versions=${MPL_VERSIONS}" >> $GITHUB_OUTPUT
            fi
          done < <(python3 get_versions.py)

          # Debug info
          echo "Detected Python versions: ${PYTHON_VERSIONS}"
          echo "Detected Matplotlib versions: ${MPL_VERSIONS}"

  build:
    needs: get-versions
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.get-python-versions.outputs.python-versions) }}
        matplotlib-version: ${{ fromJson(needs.get-versions.outputs.matplotlib-versions) }}
      fail-fast: false
    uses: ./.github/workflows/build-ultraplot.yml
    with:
      python-version: ${{ matrix.python-version }}
      matplotlib-version: ${{ matrix.matplotlib-version }}

  build-success:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - run: echo "All tests passed successfully!"
