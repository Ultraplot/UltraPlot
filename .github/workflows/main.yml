name: Matrix Test
on:
  push:
    branches: [main, devel]
  pull_request:
    branches: [main, devel]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  get-versions:
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.set-versions.outputs.python-versions }}
      matplotlib-versions: ${{ steps.set-versions.outputs.matplotlib-versions }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install tomli

      - id: set-versions
        run: |
          # Create a Python script to read and parse versions
          cat > get_versions.py << 'EOF'
          import tomli
          import re
          import json

          # Read pyproject.toml
          with open("pyproject.toml", "rb") as f:
              data = tomli.load(f)

          # Get Python version requirement
          python_req = data["project"]["requires-python"]

          # Parse min and max versions
          min_version = re.search(r">=(\d+\.\d+)", python_req)
          max_version = re.search(r"<(\d+\.\d+)", python_req)

          python_versions = []
          if min_version and max_version:
              # Convert version strings to tuples
              min_v = tuple(map(int, min_version.group(1).split(".")))
              max_v = tuple(map(int, max_version.group(1).split(".")))

              # Generate version list
              current = min_v
              while current < max_v:
                  python_versions.append(".".join(map(str, current)))
                  current = (current[0], current[1] + 1)


          # parse MPL versions
          mpl_req = None
          for d in data["project"]["dependencies"]:
            if d.startswith("matplotlib"):
              mpl_req = d
              break
          assert mpl_req is not None, "matplotlib version not found in dependencies"
          min_version = re.search(r">=(\d+\.\d+)", mpl_req)
          max_version = re.search(r"<(\d+\.\d+)", mpl_req)

          mpl_versions = []
          if min_version and max_version:
              # Convert version strings to tuples
              min_v = tuple(map(int, min_version.group(1).split(".")))
              max_v = tuple(map(int, max_version.group(1).split(".")))

              # Generate version list
              current = min_v
              while current < max_v:
                  mpl_versions.append(".".join(map(str, current)))
                  current = (current[0], current[1] + 1)

          # If no versions found, default to 3.9
          if not mpl_versions:
              mpl_versions = ["3.9"]

          # Create output dictionary
          output = {
              "python_versions": python_versions,
              "matplotlib_versions": mpl_versions
          }

          # Print as JSON
          print(json.dumps(output))
          EOF

          # Run the script and capture output
          OUTPUT=$(python3 get_versions.py)
          PYTHON_VERSIONS=$(echo $OUTPUT | jq -r '.python_versions')
          MPL_VERSIONS=$(echo $OUTPUT | jq -r '.matplotlib_versions')

          echo "Detected Python versions: ${PYTHON_VERSIONS}"
          echo "Detected Matplotlib versions: ${MPL_VERSIONS}"
          echo "python-versions=$(echo $PYTHON_VERSIONS | jq -c)" >> $GITHUB_OUTPUT
          echo "matplotlib-versions=$(echo $MPL_VERSIONS | jq -c)" >> $GITHUB_OUTPUT

  build:
    needs: get-versions
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.get-versions.outputs.python-versions) }}
        matplotlib-version: ${{ fromJson(needs.get-versions.outputs.matplotlib-versions) }}
      fail-fast: false
    uses: ./.github/workflows/build-ultraplot.yml
    with:
      python-version: ${{ matrix.python-version }}
      matplotlib-version: ${{ matrix.matplotlib-version }}

  collect-and-deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: .github/workflows/templates
          sparse-checkout-cone-mode: false

      - name: Create output directory
        run: mkdir -p combined-results

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Combine results
        run: |
          # Move all artifact contents to the combined directory
          cp -r artifacts/* combined-results/

          # Create the index.html with proper linking
          echo "<!DOCTYPE html>" > combined-results/index.html
          cat .github/workflows/templates/results.html > combined-results/index.html

          # Create version cards for all found versions
          VERSION_CARDS=""
          for version_dir in combined-results/py*-mpl*/; do
            if [ -f "$version_dir/version_info.txt" ]; then
              version_name=$(cat "$version_dir/version_info.txt")
              dir_name=$(basename "$version_dir")
              VERSION_CARDS="${VERSION_CARDS}<div class=\"version-card\">
                <h3>${version_name}</h3>
                <a href=\"./${dir_name}/fig_comparison.html\" class=\"view-button\">View Comparison Results</a>
              </div>"
            fi
          done

          # Replace placeholders in the template
          sed -i "s|PR_NUMBER|${{ github.event.pull_request.number }}|g" combined-results/index.html
          sed -i "s|PR_TITLE|${{ github.event.pull_request.title }}|g" combined-results/index.html
          sed -i "s|REPO_NAME|${{ github.repository }}|g" combined-results/index.html
          sed -i "s|COMMIT_SHA|${{ github.sha }}|g" combined-results/index.html
          sed -i "s|VERSION_CARDS|$VERSION_CARDS|g" combined-results/index.html
          sed -i "s|GENERATION_DATE|$(date)|g" combined-results/index.html

          # Use no-results template if no version directories were found
          if [ -z "$VERSION_CARDS" ]; then
            cat .github/workflows/templates/no-results.html > combined-results/index.html
          fi

      # Setup and deploy to GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: combined-results

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3

  build-success:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - run: echo "All tests passed successfully!"
